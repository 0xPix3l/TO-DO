from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from werkzeug.security import generate_password_hash, check_password_hash
import jwt
from datetime import datetime, timedelta
from functools import wraps

app = Flask(__name__)
app.config.from_object('config.Config')
CORS(app)

db = SQLAlchemy(app)
migrate = Migrate(app, db)

# Import models after db is defined
from models import User, Todo

# Create tables
with app.app_context():
    db.create_all()

def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization')
        if not token:
            return jsonify({'message': 'Token is missing!'}), 401
        try:
            data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=["HS256"])
            current_user = User.query.filter_by(id=data['user_id']).first()
        except:
            return jsonify({'message': 'Token is invalid!'}), 401
        return f(current_user, *args, **kwargs)
    return decorated

@app.route('/api/signup', methods=['POST'])
def signup():
    data = request.get_json()
    hashed_password = generate_password_hash(data['password'], method='scrypt')
    new_user = User(name=data['name'], username=data['username'], password=hashed_password)
    try:
        db.session.add(new_user)
        db.session.commit()
        return jsonify({'message': 'Registered successfully'}), 201
    except Exception as e:
        db.session.rollback()
        return jsonify({'message': 'Error occurred', 'error': str(e)}), 500

@app.route('/api/login', methods=['POST'])
def login():
    auth = request.get_json()
    user = User.query.filter_by(username=auth['username']).first()
    if not user or not check_password_hash(user.password, auth['password']):
        return jsonify({'message': 'Invalid credentials'}), 401
    token = jwt.encode({'user_id': user.id, 'exp': datetime.utcnow() + timedelta(hours=24)},
                       app.config['SECRET_KEY'], algorithm="HS256")
    return jsonify({'token': token})

@app.route('/api/todos', methods=['GET', 'POST'])
@token_required
def todos(current_user):
    if request.method == 'GET':
        todos = Todo.query.filter_by(user_id=current_user.id).all()
        return jsonify([{'id': todo.id, 'content': todo.content, 'completed': todo.completed} for todo in todos])
    elif request.method == 'POST':
        data = request.get_json()
        new_todo = Todo(content=data['content'], user_id=current_user.id)
        db.session.add(new_todo)
        db.session.commit()
        return jsonify({'message': 'Todo created', 'id': new_todo.id}), 201

@app.route('/api/todos/<int:todo_id>', methods=['PUT', 'DELETE'])
@token_required
def todo(current_user, todo_id):
    todo = Todo.query.filter_by(id=todo_id, user_id=current_user.id).first()
    if not todo:
        return jsonify({'message': 'Todo not found'}), 404
    if request.method == 'PUT':
        data = request.get_json()
        todo.content = data.get('content', todo.content)
        todo.completed = data.get('completed', todo.completed)
        db.session.commit()
        return jsonify({'message': 'Todo updated'})
    elif request.method == 'DELETE':
        db.session.delete(todo)
        db.session.commit()
        return jsonify({'message': 'Todo deleted'})

@app.route('/api/admin/users', methods=['GET'])
@token_required
def admin_users(current_user):
    if current_user.username != 'admin':
        return jsonify({'message': 'Admin access required'}), 403
    users = User.query.all()
    return jsonify([{'id': user.id, 'name': user.name, 'username': user.username} for user in users])

if __name__ == '__main__':
    app.run(debug=True)